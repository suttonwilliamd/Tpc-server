# TPC Server Agent Instructions

You have access to a TPC (Thoughts, Plans, Changes) Server. This server helps you record and organize your internal state and actions.

**Purpose:**
Use these tools to log your reasoning process, intended actions, and the actions you actually perform. This creates a traceable history of your operation.
* **Thoughts:** Record ideas, observations, incoming data, insights, or considerations before forming a plan.
* **Plans:** Define your intended course of action, goals, or strategies based on your thoughts.
* **Changes:** Log the concrete steps or modifications you make, linking them back to the relevant plan.

**Connection:**
You will connect to this server via the MCP (Multi-agent Control Plane) protocol. The specific transport (SSE or stdio) is configured by the server administrator. Your framework should handle the connection details.

**Agent Signature:**
Most tools require an `agent_signature` argument. This should be a unique string that identifies you (e.g., your agent name or ID). Be consistent with this signature.

**Available Tools:**

---

**1. `add_thought`**
* **Description:** Use this tool to record a new thought, idea, observation, or piece of information. You can optionally link this thought to one or more existing plans if it relates to them.
* **Arguments:**
    * `content` (str): The textual content of the thought.
    * `agent_signature` (str): Your unique identifier.
    * `plan_ids` (Optional[List[str]]): A list of IDs of existing plans that this thought is related to. Default is `None`.
* **Returns:** (str) A confirmation message indicating success (including the new thought's ID) or an error message.

---

**2. `create_plan`**
* **Description:** Use this tool to define a new plan, strategy, or goal. You can optionally link this plan to existing thoughts that led to its creation.
* **Arguments:**
    * `title` (str): A short, descriptive title for the plan.
    * `description` (str): A detailed explanation of the plan.
    * `agent_signature` (str): Your unique identifier.
    * `thought_ids` (Optional[List[str]]): A list of IDs of existing thoughts that informed or inspired this plan. Default is `None`.
* **Returns:** (str) A confirmation message indicating success (including the new plan's ID) or an error message.

---

**3. `log_change`**
* **Description:** Use this tool to record a specific action you have taken or a change you have made, typically as part of executing a plan. Every change *must* be linked to an existing plan.
* **Arguments:**
    * `description` (str): A description of the change or action performed.
    * `agent_signature` (str): Your unique identifier.
    * `plan_id` (str): The ID of the existing plan that this change relates to.
* **Returns:** (str) A confirmation message indicating success (including the new change's ID) or an error message (e.g., if the `plan_id` does not exist).

---

**4. `get_recent_thoughts`**
* **Description:** Use this tool to retrieve a list of the most recently recorded thoughts.
* **Arguments:**
    * `limit` (int): The maximum number of thoughts to retrieve. Default is 5.
* **Returns:** (str) A JSON string representing a list of thought objects, or an error message. Each thought object contains `id`, `content`, `agent_signature`, `created_at` (ISO format string), and `status`.

---

**5. `get_active_plans`**
* **Description:** Use this tool to retrieve a list of all plans that are currently marked with 'active' status.
* **Arguments:** None.
* **Returns:** (str) A JSON string representing a list of active plan objects, or an error message. Each plan object contains `id`, `title`, `description`, `agent_signature`, `created_at` (ISO format string), `version`, and `status`.

---

**6. `get_changes_by_plan`**
* **Description:** Use this tool to retrieve all the logged changes associated with a specific plan.
* **Arguments:**
    * `plan_id` (str): The ID of the plan for which you want to retrieve changes.
* **Returns:** (str) A JSON string representing a list of change objects associated with the plan, ordered by creation date (descending), or an error message (e.g., if the `plan_id` does not exist). Each change object contains `id`, `description`, `agent_signature`, `created_at` (ISO format string), and `plan_id`.

---

**7. `get_thought_details`**
* **Description:** Use this tool to get detailed information about a single thought, including which plans it is linked to.
* **Arguments:**
    * `thought_id` (str): The ID of the thought you want details for.
* **Returns:** (str) A JSON string representing the thought object with details, including a `related_plans` list (containing plan `id` and `title`), or an error message (e.g., if the `thought_id` does not exist).

---

**8. `get_plan_details`**
* **Description:** Use this tool to get detailed information about a single plan, including linked thoughts and logged changes.
* **Arguments:**
    * `plan_id` (str): The ID of the plan you want details for.
* **Returns:** (str) A JSON string representing the plan object with details, including `related_thoughts` (brief content) and `related_changes` (brief description and timestamp) lists, or an error message (e.g., if the `plan_id` does not exist).

---

**Workflow Guidance:**

1.  **Observe/Think:** When you encounter new information, have an idea, or perform analysis, use `add_thought` to record it.
2.  **Decide/Plan:** When you formulate a strategy or decide on a course of action based on your thoughts, use `create_plan`. Link relevant `thought_ids` if applicable.
3.  **Act/Change:** When you execute a step of your plan or make a concrete change, use `log_change`, providing the `plan_id` it relates to.
4.  **Review:** Use `get_recent_thoughts`, `get_active_plans`, `get_changes_by_plan`, `get_thought_details`, and `get_plan_details` periodically or when needed to review past activity, understand context, or retrieve specific information.

**Error Handling:**
The tools will return a string starting with "Error:" if something goes wrong (e.g., invalid ID, database issue). Check the return value after each call.
